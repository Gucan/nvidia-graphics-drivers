#!/usr/bin/make -f

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

include /usr/share/dpkg/architecture.mk
include /usr/share/dpkg/pkg-info.mk

#include debian/rules.defs
#NVIDIA_LEGACY		?=
#WATCH_VERSION		?= $(NVIDIA_LEGACY)
#WATCH_PATTERN		?=
#XORG_ABI_LIST		?=
#XORG_BOUND		?=
#LINUX_KMOD_TESTED	?=
#NVIDIA_LEGACY_CHECK	?=
#NVIDIA_SETTINGS		?= nvidia-settings$(legacy)
#ARCH_LIST		?= i386 amd64
#ARCH_DEPS_i386		?=
#UVM_ARCH_LIST		?= $(ARCH_LIST)
#VULKAN_ARCH_LIST	?= i386 amd64

version			 = $(DEB_VERSION_UPSTREAM)
version_major		 = $(firstword $(subst ., ,$(version)))

# system libdir
libdir			?= usr/lib/$(DEB_HOST_MULTIARCH)

flavour := $(version_major)
pkg_driver       := nvidia-$(flavour)

ifeq ($(DEB_HOST_ARCH),armhf)
arm_excluded         := \#
else
arm_excluded         :=
endif

ifeq ($(DEB_HOST_ARCH),amd64)
OTHER_ARCH := i386-linux-gnu
libdir_compat := usr/lib/$(OTHER_ARCH)
DKMS_disabled_modules :=
amd64_only :=
else
DKMS_disabled_modules := nvidia-uvm
libdir_compat :=
OTHER_ARCH :=
amd64_only := \#
endif

#### FIXME: ######


DEFAULT_OPENGL_PREFIX =            "usr"
DEFAULT_X_PREFIX =                 "usr/X11R6"
DEFAULT_UTILITY_PREFIX =           "usr"
DEFAULT_DOCUMENTATION_PREFIX =     "usr"
DEFAULT_APPLICATION_PROFILE_PATH = "usr/share/nvidia"

DEFAULT_LIBDIR =                   "lib"
DEFAULT_32BIT_LIBDIR =             "lib32"
DEFAULT_64BIT_LIBDIR =             "lib64"
DEFAULT_IA32_TRIPLET_LIBDIR =      "lib/i386-linux-gnu"
DEFAULT_AMD64_TRIPLET_LIBDIR =     "lib/x86_64-linux-gnu"
DEFAULT_ARMV7_TRIPLET_LIBDIR =     "lib/arm-linux-gnueabi"
DEFAULT_ARMV7HF_TRIPLET_LIBDIR =   "lib/arm-linux-gnueabihf"
DEFAULT_AARCH64_TRIPLET_LIBDIR =   "lib/aarch64-linux-gnu"
DEFAULT_PPC64LE_TRIPLET_LIBDIR =   "lib/powerpc64le-linux-gnu"

dkms_source	 = debian/nvidia-kernel-$(version_major)/usr/src/$(module)-$(version)

.PHONY: autogen prepare patch
autogen: $(AUTOGEN)
prepare: autogen unpack-stamp compare-copyright-license
#prepare: autogen unpack-stamp nvidia.ids compare-copyright-license
patch: prepare

NVIDIA-Linux-%:
	sh $*/${NVIDIA_FILENAME_$*} --extract-only
	ln -s ${NVIDIA_DIRNAME_$*} $@
	#gunzip $@/*.1.gz

# Unpack all architectures, we may need files from all of them.
unpack-stamp: NVIDIA-Linux-$(DEB_HOST_ARCH)
	dh_testdir
	ln -s NVIDIA-Linux-$(DEB_HOST_ARCH) NVIDIA-Linux
	#QUILT_PATCHES=debian/patches QUILT_SERIES=series-postunpack quilt --quiltrc /dev/null push -a || test $$? = 2
	ls -al
	touch $@

generate-nvidia-icd-json:
ifneq ($(DEB_HOST_ARCH),armhf)
	# This is for GLVND LibGL libraries
	# non-GLVND libraries will need libGL.so.1
	sed 's/__NV_VK_ICD__/libGLX_nvidia.so.0/g'  NVIDIA-Linux/nvidia_icd.json.template > \
		NVIDIA-Linux/nvidia_icd.json
endif

#nv-readme.ids: unpack-stamp
#	sed	-e '0,/A. Supported\|APPENDIX A: SUPPORTED/d' \
#		-e '0,/Appendix A. Supported\|APPENDIX A: SUPPORTED/d' \
#		-e '0,/^Below\|APPENDIX B/{/ 0x/s/.*  0x\([0-9a-fA-F]\{4\}\).*/10de\1/p; /^.\{41\} [0-9a-fA-F]\{4\} /s/^.\{41\} \([0-9a-fA-F]\{4\}\) .*/10de\1/p};d' \
#		NVIDIA-Linux/README.txt \
#		| tr a-f A-F | sort -u > $@
#	@set -e -x ; \
#	if ! cmp -s debian/$@ $@ ; then \
#		diff -u debian/$@ $@ || true ; \
#		: "*** Supported PCI IDs have changed. See diff above. Aborting. ***"; \
#		exit 1 ; \
#	fi

#nvidia.ids: nv-readme.ids
#	cp $< $@

# Reformat the LICENSE to the format needed for debian/copyright.
LICENSE.txt: unpack-stamp
	sed -e 's/^ *//; s/ *$$//; s/^$$/./; s/^/ /;' NVIDIA-Linux/LICENSE > $@

# Compare the license in debian/copyright with the LICENSE shipped in the archive.
compare-copyright-license: LICENSE.txt
	sed -e '1,/^License: NVIDIA-graphics-drivers/d; 1,/^License: NVIDIA-graphics-drivers$$/d; /^$$\|^Comment:$$/,$$d; /^ \.$$/d' debian/copyright > copyright.tmp
	sed -e '/^ \.$$/d' LICENSE.txt > LICENSE.tmp
	diff -w copyright.tmp LICENSE.tmp
	rm -f copyright.tmp LICENSE.tmp

.PHONY: binary binary-arch binary-indep build clean install
binary binary-arch binary-indep build clean install:
	dh $@

override_dh_auto_clean:
	rm -fr .pc
	rm -f NVIDIA-Linux
	rm -fr $(foreach a,$(ARCH_LIST),NVIDIA-Linux-$a $(NVIDIA_DIRNAME_$a))
	rm -fr kernel-source-tree
	rm -f nvidia.ids nv-kernel.ids nv-readme.ids pci.ids.nvidia*
	rm -f LICENSE.txt LICENSE.tmp copyright.tmp
	test ! -d debian/po || debconf-updatepo
	rm -f debian/$(pkg_driver).substvars

override_dh_clean: regen-from-templates
	dh_clean
	rm -f $(AUTOCLEAN)
	$(MAKE) -f debian/rules $(AUTOKEEP)

override_dh_auto_configure: prepare generate-nvidia-icd-json remove-stack-markings gen-abi-substvars

remove-stack-markings:
	# Disable the stack markings of binaries for security reasons.
	# See (LP: #409456)
	find NVIDIA-Linux/ -name *.so* | xargs -n1 execstack -c

	# Disable the stack markings of other binaries (only for the current arch)
	#   Note: don't use for loops or pass more than 1 argument to execstack
	#         or it will fail.
	execstack -c NVIDIA-Linux/nvidia-xconfig || true
	execstack -c NVIDIA-Linux/nvidia-smi || true
	execstack -c NVIDIA-Linux/nvidia-persistenced || true

override_dh_shlibdeps:
	LD_LIBRARY_PATH=/$(libdir):$(LD_LIBRARY_PATH) dh_shlibdeps -X$(libdir_compat)

.PHONY: gen-abi-substvars
gen-abi-substvars:
	# Generate the xserver ABI dependencies
	cat debian/substvars >> debian/$(pkg_driver).substvars

# Do not run dh_strip here.  The NVIDIA license says:
#
#     2.1.2 Linux/FreeBSD Exception.  Notwithstanding the foregoing terms of
#     Section 2.1.1, SOFTWARE designed exclusively for use on the Linux or
#     FreeBSD operating systems, or other operating systems derived from the
#     source code to these operating systems, may be copied and
#     redistributed, provided that the binary files thereof are not modified
#     in any way (except for unzipping of compressed files).
#
# Stripping the binary modules would constitute modifying the binary files
# in a way other than unzipping of compressed files.
override_dh_strip:
override_dh_strip_nondeterminism:

############################################################################

.PHONY: regen-from-templates
regen-from-templates:
	# Get rid of files belonging to different flavours
	for i in debian/templates/*.in; do \
		old=`echo $$i | sed -e "s|templates\/||g" | \
				sed -e "s|\.in\$$||g" | \
				sed -e "s|nvidia-graphics-drivers|nvidia-*|g" | \
				sed -e "s|flavour|*|g"`; \
		rm -f $$old; done
	# Create important strings
	for i in debian/templates/*.in; do \
		dest=`echo $$i | sed -e "s|templates\/||g" | \
				 sed -e "s|\.in\$$||g" | \
				 sed -e "s|flavour|$(flavour)|g"`; \
		sed -e "s|#LIBDIR#|$(libdir)|g"         \
			-e "s|#LIBDIR_COMPAT#|$(libdir_compat)|g"     \
			-e "s|#ARM_EXCLUDED#|$(arm_excluded)|g" \
			-e "s|#AMD64_ONLY#|$(amd64_only)|g" \
			-e "s|#NVEXCLUDEMODULES#|$(DKMS_disabled_modules)|g" \
			-e "s|#FLAVOUR#|$(flavour)|g" \
			$$i > $$dest;      \
	done


#debian/module/debian/changelog: debian/changelog
#	sed '1s/^nvidia-graphics-drivers$(legacy)/$(nvidia)-kernel/g' $< > $@


# Renaming control files for legacy packaging
#define rename-template
#$2%: $1%
#	cp -a $$< $$@
#endef
#ifneq (,$(legacy))
#$(foreach p,$(CONTROL_PREFIXES),$(eval $(call rename-template,$p,$(call renamed_prefix,$p))))
#endif

#include debian/bug-control.mk

############################################################################

# only invoked manually
%.txt: %.list
	cat $< \
	| sed -e 's/^10DE.... *//; /^$$/d' \
	| uniq \
	| sed -e 's/ /#/g; s/#*$$/,/; $$ s/,$$/./' \
	| ( tr '\n' ' '; echo ) \
	| fold -s -w 78 \
	| sed -e 's/#/ /g; s/ *$$//' > $@

# only invoked manually
pci.ids.nvidia: /usr/share/misc/pci.ids
	sed -nr '/^10de/,/^10df/ { /^\t\t/d; /\t/ { s/  (.*) \[(.*)\]$$/  \2 [\1]/; s/^\t/10de/; p} }' $< > $@.tmp
	cut -c 1-8 $@.tmp | tr a-f A-F > $@.tmp1
	cut -c 9- $@.tmp | paste -d '' $@.tmp1 - > $@
	$(RM) $@.tmp $@.tmp1

# only invoked manually
%.names: %.ids pci.ids.nvidia
	cat $< | \
	while read id ; do \
		grep ^$$id pci.ids.nvidia || echo $$id ; \
	done > $@

# only invoked manually
file-lists: $(patsubst %,debian/files_$(NVIDIA_RELEASE)_%,$(ARCH_LIST))
debian/files_$(NVIDIA_RELEASE)_%: NVIDIA-Linux-%
	(cd $< && find .) | sed 's/$(NVIDIA_RELEASE)/VERSION/g' | sort > $@

# only invoked manually
check-whitespace:
	grep -r --exclude-dir=.svn --exclude-dir=.git --exclude '*.patch' -E '\s$$' debian || true

############################################################################

CACHE			?= ../.cache
ORIGDIR			?= nvidia-graphics-drivers-$(version_major).orig
TARBALL_BASE		?= nvidia-graphics-drivers-$(version_major)_$(NVIDIA_RELEASE).orig
TARBALL_SUFFIX		?= .tar.gz
TARBALL			?= $(TARBALL_BASE)$(TARBALL_SUFFIX)
ORIGDIR.empty		?= $(ORIGDIR)
TARBALL.empty		?= $(TARBALL)

# $1 = arch
get_download_url	 = $(or $(HTTPURL_PREFIX_$(strip $1)),$(HTTPURL_PREFIX))/$(HTTPURL_ARCHDIR_$(strip $1))/$(NVIDIA_RELEASE)/$(NVIDIA_FILENAME_$(strip $1))
get_origdir		 = $(or $(ORIGDIR.$(strip $1)),$(ORIGDIR)-$(strip $1))
get_tarball		 = $(or $(TARBALL.$(strip $1)),$(TARBALL_BASE)-$(strip $1)$(TARBALL_SUFFIX))

get-orig-source-prepare:
	$(RM) -r get-orig-source
	mkdir get-orig-source

get-orig-source-prepare/%: get-orig-source-prepare
	$(RM) $(call get_tarball,$*)
	mkdir get-orig-source/$(call get_origdir,$*)

get-orig-source-download/%: get-orig-source-prepare
	ln -v $(CACHE)/$(NVIDIA_FILENAME_$*) get-orig-source/ 2>/dev/null || \
		wget $(call get_download_url,$*) -P get-orig-source/
	if [ -d $(CACHE) ] && [ ! -f $(CACHE)/$(NVIDIA_FILENAME_$*) ]; then \
		ln -v get-orig-source/$(NVIDIA_FILENAME_$*) $(CACHE) ; fi

get-orig-source-files/%: get-orig-source-prepare/% get-orig-source-download/%
	@set -e -x ; \
	    cd get-orig-source ; \
	    mv $(NVIDIA_FILENAME_$*) $(call get_origdir,$*)/ ; \
	    chmod 0755 $(call get_origdir,$*)/* ; \
	    touch $(call get_origdir,$*).stamp -r $$(ls -tr $$(find $(call get_origdir,$*) -type f) | tail -n 1)

get-orig-source-pack/%: get-orig-source-files/%
	@set -e -x ; \
	    cd get-orig-source ; \
	    tar cv \
	        --clamp-mtime --mtime="./$(call get_origdir,$*).stamp" \
	        --sort=name \
		--owner=root --group=src \
		$(call get_origdir,$*) \
		| gzip -n -9 > $(call get_tarball,$*) ; \
	    touch $(call get_tarball,$*) -r $(call get_origdir,$*).stamp
	mv get-orig-source/$(call get_tarball,$*) .

get-orig-source-files/empty: get-orig-source-prepare/empty $(foreach a,$(ARCH_LIST),get-orig-source-pack/$a)
	touch get-orig-source/$(call get_origdir,empty).stamp -r $$(ls -tr $(foreach a,$(ARCH_LIST),$(call get_tarball,$a)) | tail -n 1)

.PHONY: get-orig-source
get-orig-source: get-orig-source-pack/empty
	rm -rf get-orig-source
